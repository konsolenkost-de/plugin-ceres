{"version":3,"sources":["webpack:///resources/js/src/app/components/item/VariationSelect.vue","webpack:///./node_modules/core-js/internals/object-to-array.js","webpack:///./node_modules/core-js/modules/es.object.entries.js","webpack:///./node_modules/core-js/modules/es.object.values.js","webpack:///./resources/js/src/app/components/item/VariationSelect.vue?ea6c","webpack:///./resources/js/src/app/components/item/VariationSelect.vue","webpack:///./resources/js/src/app/components/item/VariationSelect.vue?7032","webpack:///./resources/js/src/app/components/item/VariationSelect.vue?65d9"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4FA;AACA;;AAEA;;AAEA;AAEA,0BAFA;AAIA;AACA,kBACA;AACA,mBADA;AAEA;AAFA;AAFA,GAJA;AAYA;AACA;AACA;AADA;AADA,GAZA;AAkBA,MAlBA,kBAmBA;AACA;AACA,iCADA;AAEA;AAFA;AAIA,GAxBA;AA0BA,SA1BA,qBA2BA;AACA;AACA;AACA,GA9BA;AAgCA,YACA;AACA,oBADA,8BACA;AACA;AACA,KAHA;AAKA,0BALA,oCAKA;AACA;AACA,KAPA;;AASA;AACA;AACA;AACA,kBAZA,4BAaA;AACA;AAAA;AAAA;AACA,KAfA;AAiBA,yBAjBA,mCAkBA;AACA;AACA,KApBA;;AAsBA;AACA;AACA;AACA;AACA,oBA1BA,8BA2BA;AACA;;AAEA,2CACA;AACA;AACA;;AAEA;AACA,KApCA;;AAsCA;AACA;AACA;AACA;AACA,iBA1CA,2BA2CA;AACA;AACA;AACA;;AAHA,iDAKA,UALA;AAAA;;AAAA;AAKA,4DACA;AAAA,cADA,SACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;;AAUA;AACA,KAtDA;AAwDA,8BAxDA,wCAyDA;AACA;AAAA;AAAA;AACA,KA3DA;AA6DA,oBA7DA,8BA8DA;AACA;AACA,KAhEA;AAkEA,gBAlEA,0BAmEA;AACA;AAAA;AAAA;AACA,KArEA;AAuEA,cAvEA,wBAuEA;AACA;AACA,KAzEA;AA2EA,sBA3EA,gCA2EA;AACA;AACA,KA7EA;AA+EA,gBA/EA,0BA+EA;AACA;AACA,KAjFA;AAmFA,cAnFA,wBAmFA;AACA;AACA;AArFA,GAjCA;AAyHA,WACA;AACA;AACA;AACA;AACA;AACA;AACA,mBANA,2BAMA,WANA,EAMA,gBANA,EAOA;AACA;;AAEA,qEACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA,KAfA;;AAiBA;AACA;AACA;AACA;AACA,cArBA,sBAqBA,MArBA,EAsBA;AACA;AACA;AACA;AACA,KA1BA;AA4BA,qBA5BA,6BA4BA,WA5BA,EA4BA,gBA5BA,EA4BA,MA5BA,EA6BA;AACA,iCACA;AACA;AACA,OAHA,MAIA,wBACA;AACA;AACA;AACA,OAJA,MAMA;AACA;AACA;;AAEA;AACA,KA7CA;;AA+CA;AACA;AACA;AACA;AACA;AACA;AACA,yBArDA,iCAqDA,WArDA,EAqDA,gBArDA,EAqDA,MArDA,EAsDA;AACA;AACA,6EAFA,CAIA;;AACA;;AAEA,6BACA;AACA;AACA;;AAEA;AAEA;AACA,KArEA;AAuEA,cAvEA,sBAuEA,SAvEA,EAuEA,cAvEA,EAwEA;AACA,yGACA;AACA;AACA,OAHA,MAIA,gCACA;AACA;AACA,mCADA;AAEA;AAFA;AAIA;;AAEA;AACA,KAtFA;;AAwFA;AACA;AACA;AACA;AACA;AACA,2BA7FA,mCA6FA,WA7FA,EA6FA,gBA7FA,EA8FA;AACA;AACA;;AAEA,+DACA;AACA;AACA;;AAEA,+BACA,yFADA,EAEA,yFAFA;;AAKA,oCACA,sBADA,IAEA,6FAFA,EAGA;AACA;AACA;AACA;;AAEA;AACA;;AAvBA,kDAyBA,kCAzBA;AAAA;;AAAA;AAyBA,+DACA;AAAA,cADA,SACA;;AACA,qDACA;AACA;AACA;AACA;AA/BA;AAAA;AAAA;AAAA;AAAA;;AAgCA,oCACA;AACA,mBACA,qEADA;AAGA;;AAEA,yBACA;AACA;AACA;;AAEA;AAAA;AAAA;AACA,KA3IA;;AA6IA;AACA;AACA;AACA;AACA;AACA;AACA,0BAnJA,kCAmJA,WAnJA,EAmJA,gBAnJA,EAmJA,MAnJA,EAoJA;AACA,8FACA;AACA,2DACA;AACA;AAAA,mBACA,wFADA;AAAA;AAEA,SAJA;AAKA,OAPA,MAQA,8EACA;AACA;AAAA;AAAA;AACA;;AAEA;AAAA;AAAA;AACA,KAnKA;;AAqKA;AACA;AACA;AACA;AACA,wBAzKA,gCAyKA,mBAzKA,EA0KA;AACA;AACA;;AAFA,kDAIA,mBAJA;AAAA;;AAAA;AAIA,+DACA;AAAA,cADA,SACA;AACA;;AAEA,sJACA;AACA;AACA;AAEA;AACA;;AATA,sDAWA,oBAXA;AAAA;;AAAA;AAWA,mEACA;AAAA,kBADA,SACA;;AACA,iGACA;AACA;AACA;AACA;AAjBA;AAAA;AAAA;AAAA;AAAA;;AAmBA,oGACA;AACA;AACA;AACA,WAJA,MAKA,iGACA;AACA;AACA;AACA;AACA;AAlCA;AAAA;AAAA;AAAA;AAAA;;AAoCA;AACA,KA/MA;;AAiNA;AACA;AACA;AACA;AACA,kCArNA,0CAqNA,SArNA,EAsNA;AAAA;;AACA;AACA;;AAFA;AAMA;AACA;AAAA;AAAA;;AAEA,4HACA;AACA,mJACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;;AAjBA;AAAA;;AAIA,+DACA;AAAA,cADA,mBACA;AAaA;;AAEA,6DACA;AACA;AACA;;AAEA;AAAA;AAAA;AAAA;AACA,KAhPA;;AAkPA;AACA;AACA;AACA;AACA,oBAtPA,4BAsPA,gBAtPA,EAuPA;AACA;AACA;;AAFA,kDAIA,kCAJA;AAAA;;AAAA;AAIA,+DACA;AAAA,cADA,gBACA;AACA,wBACA;AAAA;AAAA,YADA;AAIA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;;AAaA,oCACA;AACA,0KACA;AACA,wBACA;AAAA,kBACA;AADA,YADA;AAKA;;AAEA;AACA;;AAEA;AAEA;AAEA,+BACA,qBADA,EAEA,UAFA,CAEA,IAFA;AAGA,KAzRA;;AA2RA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAlSA,4BAkSA,UAlSA,EAkSA,MAlSA,EAkSA,MAlSA,EAkSA,UAlSA,EAmSA;AAAA;;AACA;AACA;AACA;AACA;AAEA;;AAEA,+GACA;AACA;AACA;;AAEA;;AACA;AACA,2EACA;AACA;AACA,mEACA;AACA;AACA,SALA,CAOA;AACA;;;AACA,gIACA,4BADA,EAEA;AACA;AACA;;AAbA,qCAeA,WAfA;AAiBA;AAAA,mBACA,wDADA;AAAA,aAjBA,CAoBA;;AACA,oCACA,+DADA,KAEA,8IAFA,GAGA;AACA;AAAA;AAAA;AACA;AA1BA;;AAeA,4CACA;AAAA,4BADA,WACA;;AAAA;AAWA;;AAEA;AACA,OA/BA;AAiCA;AAEA;AACA,KAtVA;;AAwVA;AACA;AACA;AACA;AACA;AACA;AACA,6BA9VA,qCA8VA,WA9VA,EA8VA,gBA9VA,EA8VA,uBA9VA,EA+VA;AACA;;AACA,qEACA;AACA;AACA;;AAEA;AAEA;AAEA;AACA;;AAEA,mCACA;AACA;AAAA;AAAA;AACA;;AAEA;AACA,KAnXA;;AAqXA;AACA;AACA;AACA;AACA,wBAzXA,gCAyXA,MAzXA,EA0XA;AACA;;AACA,wCACA;AACA;AACA;;AAEA,kBACA,gBADA,CACA,IADA,EACA,MADA,EAEA,MAFA,CAEA;AAAA;AAAA,OAFA,EAGA,MAHA,GAGA,CAHA;AAIA,KArYA;;AAuYA;AACA;AACA;AACA;AACA;AACA,gBA5YA,wBA4YA,WA5YA,EA6YA;AAAA;;AACA,mHACA;AACA;AACA;;AAEA,yFACA;AACA,8GACA;AACA,uEACA;AACA,oBACA;AACA,8CADA;AAEA,4CAFA;AAGA;AAHA;AAFA,WADA;AASA,SAXA;AAYA;AACA,KAlaA;AAoaA,aApaA,qBAoaA,OApaA,EAqaA;AACA,yCACA;AACA;AACA;;AAEA;AACA,KA5aA;AA8aA,iCA9aA,yCA8aA,SA9aA,EA+aA;AACA;AACA;AAAA;AAAA;;AAEA,kCACA;AACA;AACA,OAHA,MAIA,yEACA;AACA;AACA;;AACA;AACA,KA5bA;AA8bA,0BA9bA,kCA8bA,aA9bA,EA+bA;AAAA;;AACA;AACA;AACA,+CAFA,CAGA;;AACA;AACA;AACA;;AACA;AACA;AACA,SATA,CAUA;;;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA,OAlBA;AAmBA,KAndA;AAodA,iBApdA,yBAodA,QApdA,EAodA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AA7dA,GA1HA;AA0lBA,SACA;AACA,oBADA,4BACA,KADA,EAEA;AACA;AACA,KAJA;AAKA,cALA,wBAMA;AACA;AACA;AACA;AATA;AA3lBA,G;;;;;;;;;;;ACjGA,kBAAkB,mBAAO,CAAC,iFAA0B;AACpD,iBAAiB,mBAAO,CAAC,iFAA0B;AACnD,sBAAsB,mBAAO,CAAC,6FAAgC;AAC9D,2BAA2B,mBAAO,CAAC,qHAA4C;;AAE/E,YAAY,kBAAkB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC/BA,QAAQ,mBAAO,CAAC,uEAAqB;AACrC,eAAe,mBAAO,CAAC,yFAA8B;;AAErD;AACA;AACA,GAAG,+BAA+B;AAClC;AACA;AACA;AACA,CAAC;;;;;;;;;;;;ACTD,QAAQ,mBAAO,CAAC,uEAAqB;AACrC,cAAc,mBAAO,CAAC,yFAA8B;;AAEpD;AACA;AACA,GAAG,+BAA+B;AAClC;AACA;AACA;AACA,CAAC;;;;;;;;;;;;;ACTD;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,qBAAqB;AAChC;AACA;AACA,gCAAgC,yCAAyC;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA,8CAA8C,YAAY,YAAY,EAAE;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,yBAAyB,SAAS,oCAAoC,EAAE;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA,8CAA8C,sBAAsB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA,8CAA8C,sBAAsB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA,gDAAgD,sBAAsB;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,2BAA2B,yCAAyC;AACpE,6BAA6B,4BAA4B;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AChbA;AAAA;AAAA;AAAA;AAA8F;AAC3B;AACL;;;AAG9D;AACsG;AACtG,gBAAgB,2GAAU;AAC1B,EAAE,qFAAM;AACR,EAAE,0FAAM;AACR,EAAE,mGAAe;AACjB;AACA;AACA;AACA;;AAEA;;AAEA;AACA,IAAI,KAAU,EAAE,YAiBf;AACD;AACe,gF;;;;;;;;;;;;ACtCf;AAAA;AAAA,wCAAuM,CAAgB,mPAAG,EAAC,C;;;;;;;;;;;;ACA3N;AAAA;AAAA;AAAA;AAAA;AAAA","file":"chunks/ceres-11.js","sourcesContent":["<template>\r\n    <div>\r\n        <div v-if=\"attributes.length || (possibleUnitCombinationIds.length > 1 && isContentVisible)\" class=\"row\">\r\n            <div class=\"col-12 variation-select\" v-for=\"attribute in attributes\">\r\n                <!-- dropdown -->\r\n                <div class=\"input-unit\" ref=\"attributesContaner\" v-if=\"attribute.type === 'dropdown'\">\r\n                    <select :id=\"'custom-select_' + attribute.name\" class=\"custom-select\" @change=\"selectAttribute(attribute.attributeId, $event.target.value)\" data-testing=\"variation-select-dropdown\">\r\n                        <option :value=\"-1\" v-if=\"addPleaseSelectOption || !hasSelection\">{{ $translate(\"Ceres::Template.singleItemPleaseSelect\") }}</option>\r\n                        <option\r\n                                :value=\"null\" v-if=\"hasEmptyOption || selectedAttributes[attribute.attributeId] === null\"\r\n                                :selected=\"selectedAttributes[attribute.attributeId] === null\">{{ $translate(\"Ceres::Template.singleItemNoSelection\") }}</option>\r\n                        <option\r\n                                v-for=\"value in attribute.values\"\r\n                                :value=\"value.attributeValueId\"\r\n                                :selected=\"value.attributeValueId === selectedAttributes[attribute.attributeId]\">\r\n                            <template v-if=\"isAttributeSelectionValid(attribute.attributeId, value.attributeValueId, true)\">\r\n                                {{ value.name }}\r\n                            </template>\r\n                            <template v-else-if=\"isAttributeSelectionValid(attribute.attributeId, value.attributeValueId, false)\">\r\n                                {{ $translate(\"Ceres::Template.singleItemNotSalableAttribute\", { \"name\": value.name }) }}\r\n                            </template>\r\n                            <template v-else>\r\n                                {{ $translate(\"Ceres::Template.singleItemInvalidAttribute\", { \"name\": value.name }) }}\r\n                            </template>\r\n                        </option>\r\n                    </select>\r\n                    <label :for=\"'custom-select_' + attribute.name\" v-tooltip=\"isTextCut(attribute.name)\" data-toggle=\"tooltip\" data-placement=\"top\" :title=\"attribute.name\" data-testing=\"variation-select-dropdown-label\">{{ attribute.name }}</label>\r\n                </div>\r\n                <!-- /dropdown -->\r\n\r\n                <!-- box and image -->\r\n                <div v-else-if=\"attribute.type === 'box' || attribute.type === 'image'\">\r\n                    <span class=\"text-muted\" data-testing=\"attribute-name\">{{ attribute.name }}:</span> <b data-testing=\"attribute-value\">{{ getSelectedAttributeValueName(attribute) }}</b>\r\n                    <div class=\"v-s-boxes py-3\" :class=\"{ 'images': attribute.type === 'image' }\">\r\n                        <div class=\"v-s-box bg-white empty-option\"\r\n                             data-testing=\"variation-select-box\"\r\n                             v-if=\"addPleaseSelectOption\"\r\n                             @click=\"selectAttribute(attribute.attributeId, -1)\"\r\n                             :class=\"{ 'active': selectedAttributes[attribute.attributeId] === -1, 'invalid': !isAttributeSelectionValid(attribute.attributeId, -1) }\">\r\n                            <span class=\"mx-3\">{{ $translate(\"Ceres::Template.singleItemPleaseSelect\") }}</span>\r\n                        </div>\r\n                        <div class=\"v-s-box bg-white empty-option\"\r\n                             data-testing=\"variation-select-box\"\r\n                             v-if=\"hasEmptyOption\"\r\n                             @click=\"selectAttribute(attribute.attributeId, null)\"\r\n                             :class=\"{ 'active': selectedAttributes[attribute.attributeId] === null, 'invalid': !isAttributeSelectionValid(attribute.attributeId, null, true) }\">\r\n                            <span class=\"mx-3\">{{ $translate(\"Ceres::Template.singleItemNoSelection\") }}</span>\r\n                        </div>\r\n\r\n                        <div class=\"v-s-box bg-white\"\r\n                             data-testing=\"variation-select-box\"\r\n                             v-for=\"value in attribute.values\"\r\n                             @click=\"selectAttribute(attribute.attributeId, value.attributeValueId)\"\r\n                             :class=\"{ 'active': value.attributeValueId === selectedAttributes[attribute.attributeId], 'invalid': !isAttributeSelectionValid(attribute.attributeId, value.attributeValueId, true) }\"\r\n                             v-tooltip=\"true\" data-html=\"true\" data-toggle=\"tooltip\" data-placement=\"top\" :data-original-title=\"getTooltip(attribute, value)\">\r\n                            <span class=\"mx-3\" v-if=\"attribute.type === 'box'\">{{ value.name }}</span>\r\n                            <img class=\"p-1\" v-else :src=\"value.imageUrl\" :alt=\"value.name\">\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <!-- /box and image -->\r\n            </div>\r\n\r\n            <!-- units -->\r\n            <div class=\"col-12 variation-select\" v-if=\"possibleUnitCombinationIds.length > 1 && isContentVisible\">\r\n                <div class=\"input-unit\">\r\n                    <select id=\"unit-combination-ids-select\" class=\"custom-select\" @change=\"selectUnit($event.target.value)\" data-testing=\"variation-select-unit\">\r\n                        <option\r\n                                v-for=\"unitCombinationId in possibleUnitCombinationIds\"\r\n                                :value=\"unitCombinationId\"\r\n                                :selected=\"parseInt(unitCombinationId) === selectedUnit\">\r\n                            <template v-if=\"isUnitSelectionValid(unitCombinationId)\">\r\n                                {{ possibleUnits[unitCombinationId] }}\r\n                            </template>\r\n                            <template v-else>\r\n                                {{ $translate(\"Ceres::Template.singleItemInvalidAttribute\", { \"name\": possibleUnits[unitCombinationId] }) }}\r\n                            </template>\r\n                        </option>\r\n                    </select>\r\n                    <label for=\"unit-combination-ids-select\" data-testing=\"variation-select-unit-label\">{{ $translate(\"Ceres::Template.singleItemContent\") }}</label>\r\n                </div>\r\n            </div>\r\n            <!-- /units -->\r\n        </div>\r\n\r\n        <div v-else>\r\n            <slot></slot>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { textWidth } from \"../../helper/dom\";\r\nimport { isDefined, isNull, isNullOrUndefined } from \"../../helper/utils\";\r\n\r\nconst NotificationService = require(\"../../services/NotificationService\");\r\n\r\nexport default {\r\n\r\n    name: \"variation-select\",\r\n\r\n    props: {\r\n        forceContent:\r\n        {\r\n            type: Boolean,\r\n            default: false\r\n        }\r\n    },\r\n\r\n    inject: {\r\n        itemId: {\r\n            default: null\r\n        }\r\n    },\r\n\r\n    data()\r\n    {\r\n        return {\r\n            filteredVariationsCache: {},\r\n            lastContentCount: 0\r\n        };\r\n    },\r\n\r\n    mounted()\r\n    {\r\n        // initially check for valid selection and disable add to basket button\r\n        this.$store.commit(`${this.itemId}/variationSelect/setIsVariationSelected`, !!this.currentSelection);\r\n    },\r\n\r\n    computed:\r\n    {\r\n        currentVariation() {\r\n            return this.$store.getters[`${this.itemId}/currentItemVariation`];\r\n        },\r\n\r\n        currentVariationSelect() {\r\n            return this.$store.state.items[this.itemId] && this.$store.state.items[this.itemId].variationSelect;\r\n        },\r\n\r\n        /**\r\n         * returns true if any variation has no attributes\r\n         */\r\n        hasEmptyOption()\r\n        {\r\n            return this.variations.some(variation => !variation.attributes.length);\r\n        },\r\n\r\n        addPleaseSelectOption()\r\n        {\r\n            return App.config.item.showPleaseSelect;\r\n        },\r\n\r\n        /**\r\n         * returns the variation, based on the selected attributes / unit\r\n         * returns false if there are none or multiple results\r\n         */\r\n        currentSelection()\r\n        {\r\n            const filteredVariations = this.filterVariations(null, null, true);\r\n\r\n            if (filteredVariations.length === 1)\r\n            {\r\n                return filteredVariations[0];\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * returns all units, selectable by current selection\r\n         * prop 'forceContent' with value true will return all units, without filtering\r\n         */\r\n        possibleUnits()\r\n        {\r\n            // use an object, to make the entries unique\r\n            const possibleUnits = {};\r\n            const variations = this.forceContent ? this.variations : this.filterVariations(null, null, null, true);\r\n\r\n            for (const variation of variations)\r\n            {\r\n                possibleUnits[variation.unitCombinationId] = variation.unitName;\r\n            }\r\n\r\n            return possibleUnits;\r\n        },\r\n\r\n        possibleUnitCombinationIds()\r\n        {\r\n            return this.transformPossibleUnits(this.possibleUnits).map(value => value[0]);\r\n        },\r\n\r\n        isContentVisible()\r\n        {\r\n            return !this.forceContent && !!this.currentSelection || this.forceContent;\r\n        },\r\n\r\n        hasSelection()\r\n        {\r\n            return !isNullOrUndefined(this.selectedAttributes) && !Object.values(this.selectedAttributes).some((value) => value < 0);\r\n        },\r\n\r\n        attributes() {\r\n            return this.currentVariationSelect && this.currentVariationSelect.attributes;\r\n        },\r\n\r\n        selectedAttributes() {\r\n            return this.currentVariationSelect && this.currentVariationSelect.selectedAttributes;\r\n        },\r\n\r\n        selectedUnit() {\r\n            return this.currentVariationSelect && this.currentVariationSelect.selectedUnit;\r\n        },\r\n\r\n        variations() {\r\n            return this.currentVariationSelect && this.currentVariationSelect.variations;\r\n        }\r\n    },\r\n\r\n    methods:\r\n    {\r\n        /**\r\n         * select an attribute and check, if the selection is valid; if not, unsetInvalidSelection will be executed\r\n         * @param {number} attributeId\r\n         * @param {[number, string, null]} attributeValueId\r\n         */\r\n        selectAttribute(attributeId, attributeValueId)\r\n        {\r\n            attributeValueId = parseInt(attributeValueId) || null;\r\n\r\n            if (this.selectedAttributes[attributeId] !== attributeValueId)\r\n            {\r\n                this.$store.commit(`${this.itemId}/variationSelect/selectItemAttribute`, { attributeId, attributeValueId });\r\n                this.onSelectionChange(attributeId, attributeValueId, null);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * select a unit and check, if the selection is valid; if not, unsetInvalidSelection will be executed\r\n         * @param {[number, string]} unitId\r\n         */\r\n        selectUnit(unitId)\r\n        {\r\n            unitId = parseInt(unitId);\r\n            this.$store.commit(`${this.itemId}/variationSelect/selectItemUnit`, unitId);\r\n            this.onSelectionChange(null, null, unitId);\r\n        },\r\n\r\n        onSelectionChange(attributeId, attributeValueId, unitId)\r\n        {\r\n            if (this.currentSelection)\r\n            {\r\n                this.setVariation(this.currentSelection.variationId);\r\n            }\r\n            else if (!this.hasSelection)\r\n            {\r\n                // user switched back to \"please select\"\r\n                this.setVariation(0);\r\n            }\r\n            else\r\n            {\r\n                this.unsetInvalidSelection(attributeId, attributeValueId, unitId);\r\n            }\r\n\r\n            this.lastContentCount = this.possibleUnitCombinationIds.length;\r\n        },\r\n\r\n        /**\r\n         * changes the selected attributes / unit, to ensure a valid seelction\r\n         * @param {[number, null]} attributeId\r\n         * @param {[number, null]} attributeValueId\r\n         * @param {[number, null]} unitId\r\n         */\r\n        unsetInvalidSelection(attributeId, attributeValueId, unitId)\r\n        {\r\n            const qualifiedVariations = this.getQualifiedVariations(attributeId, attributeValueId, unitId);\r\n            const closestVariations = this.getClosestVariations(qualifiedVariations);\r\n            \r\n            // if the salable 'closestVariations' is undefined, take the not-salable one\r\n            const closestVariation = closestVariations[0] || closestVariations[1];\r\n\r\n            if (!closestVariation)\r\n            {\r\n                return;\r\n            }\r\n\r\n            const invalidSelection = this.getInvalidSelectionByVariation(closestVariation);\r\n\r\n            this.correctSelection(invalidSelection);\r\n        },\r\n\r\n        getTooltip(attribute, attributeValue)\r\n        {\r\n            if(!this.isAttributeSelectionValid(attribute.attributeId, attributeValue.attributeValueId, true))\r\n            {\r\n                return this.getInvalidOptionTooltip(attribute.attributeId, attributeValue.attributeValueId);\r\n            }\r\n            else if(attribute.type === \"image\")\r\n            {\r\n                return this.$translate(\"Ceres::Template.singleItemAttributeTooltip\", {\r\n                    attribute: attribute.name,\r\n                    value: attributeValue.name\r\n                });\r\n            }\r\n\r\n            return \"\";\r\n        },\r\n\r\n        /**\r\n         * returns a string for box tooltips, for not available options\r\n         * @param {number} attributeId\r\n         * @param {number} attributeValueId\r\n         */\r\n        getInvalidOptionTooltip(attributeId, attributeValueId)\r\n        {\r\n            const qualifiedVariations = this.getQualifiedVariations(attributeId, attributeValueId);\r\n            const closestVariations   = this.getClosestVariations(qualifiedVariations);\r\n\r\n            if (!closestVariations || closestVariations.length <= 0)\r\n            {\r\n                return \"\";\r\n            }\r\n\r\n            const invalidSelections = [\r\n                !!closestVariations[0] ? this.getInvalidSelectionByVariation(closestVariations[0]) : null,\r\n                !!closestVariations[1] ? this.getInvalidSelectionByVariation(closestVariations[1]) : null\r\n            ];\r\n\r\n            if (!!invalidSelections[0]\r\n                && !!invalidSelections[1]\r\n                && invalidSelections[0].attributesToReset.length > invalidSelections[1].attributesToReset.length)\r\n            {\r\n                // there is a non-salable variation with less changes\r\n                return this.$translate(\"Ceres::Template.singleItemNotSalable\");\r\n            }\r\n\r\n            const invalidSelection = invalidSelections[0] || invalidSelections[1];\r\n            const names = [];\r\n\r\n            for (const attribute of invalidSelection.attributesToReset)\r\n            {\r\n                if (attribute.attributeId !== attributeId)\r\n                {\r\n                    names.push(\"<b>\" + attribute.name +\"</b>\");\r\n                }\r\n            }\r\n            if (invalidSelection.newUnit)\r\n            {\r\n                names.push(\r\n                    \"<b>\" + this.$translate(\"Ceres::Template.singleItemContent\") + \"</b>\"\r\n                );\r\n            }\r\n\r\n            if (!names.length)\r\n            {\r\n                return null;\r\n            }\r\n\r\n            return this.$translate(\"Ceres::Template.singleItemNotAvailableInSelection\", { name: names.join(\", \") });\r\n        },\r\n\r\n        /**\r\n         * returns a list of variations, filtered by attribute or unit\r\n         * @param {[number, null]} attributeId\r\n         * @param {[number, null]} attributeValueId\r\n         * @param {[number, null]} unitId\r\n         */\r\n        getQualifiedVariations(attributeId, attributeValueId, unitId)\r\n        {\r\n            if (isDefined(attributeValueId))\r\n            {\r\n                return this.variations.filter(variation =>\r\n                {\r\n                    return isDefined(variation.attributes.find(attribute =>\r\n                        attribute.attributeId === attributeId && attribute.attributeValueId === attributeValueId));\r\n                });\r\n            }\r\n            else if (isDefined(unitId))\r\n            {\r\n                return this.variations.filter(variation => variation.unitCombinationId === unitId);\r\n            }\r\n\r\n            return this.variations.filter(variation => !variation.attributes.length);\r\n        },\r\n\r\n        /**\r\n         * return a salable and a non-salable variation with the minimum number of changes on attributes compared to the current selection.\r\n         * @param {array} qualifiedVariations\r\n         */\r\n        getClosestVariations(qualifiedVariations)\r\n        {\r\n            let closestSalableVariation, numberOfSalableChanges;\r\n            let closestNonSalableVariation, numberOfNonSalableChanges;\r\n\r\n            for (const variation of qualifiedVariations)\r\n            {\r\n                let changes = 0;\r\n\r\n                if (variation.unitCombinationId !== this.selectedUnit && !isNull(this.selectedUnit))\r\n                {\r\n                    // when the unit dropdown isn't visible, it should have a lower weight for reset investigations\r\n                    const unitWeight = this.possibleUnitCombinationIds.length > 1 && this.isContentVisible ? 0.9 : 0.1;\r\n\r\n                    changes += unitWeight;\r\n                }\r\n\r\n                for (const attribute of variation.attributes)\r\n                {\r\n                    if (this.selectedAttributes[attribute.attributeId] !== attribute.attributeValueId)\r\n                    {\r\n                        changes++;\r\n                    }\r\n                }\r\n\r\n                if(variation.isSalable && (!numberOfSalableChanges || changes < numberOfSalableChanges))\r\n                {\r\n                    closestSalableVariation = variation;\r\n                    numberOfSalableChanges = changes;\r\n                }\r\n                else if (!variation.isSalable && (!numberOfNonSalableChanges || changes < numberOfNonSalableChanges))\r\n                {\r\n                    closestNonSalableVariation = variation;\r\n                    numberOfNonSalableChanges = changes;\r\n                }\r\n            }\r\n\r\n            return [closestSalableVariation, closestNonSalableVariation];\r\n        },\r\n\r\n        /**\r\n         * returns object with array 'attributesToReset' and newUnit. The attributesToReset contains all attributes, which are not matching with the given variation\r\n         * @param {object} variation\r\n         */\r\n        getInvalidSelectionByVariation(variation)\r\n        {\r\n            const attributesToReset = [];\r\n            let newUnit = null;\r\n\r\n            for (let selectedAttributeId in this.selectedAttributes)\r\n            {\r\n                selectedAttributeId = parseInt(selectedAttributeId);\r\n                const variationAttribute = variation.attributes.find(attribute => attribute.attributeId === selectedAttributeId);\r\n\r\n                if (!isNull(this.selectedAttributes[selectedAttributeId]))\r\n                {\r\n                    if (variationAttribute && variationAttribute.attributeValueId !== this.selectedAttributes[selectedAttributeId] || !variationAttribute)\r\n                    {\r\n                        const attributeToReset = this.attributes.find(attr => attr.attributeId === selectedAttributeId);\r\n\r\n                        attributesToReset.push(attributeToReset);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (variation.unitCombinationId !== this.selectedUnit)\r\n            {\r\n                newUnit = variation.unitCombinationId;\r\n            }\r\n\r\n            return { attributesToReset, newUnit };\r\n        },\r\n\r\n        /**\r\n         * resets all invalid attributes and change the unit, if required. Prints a message to the user if so.\r\n         * @param {object} invalidSelection\r\n         */\r\n        correctSelection(invalidSelection)\r\n        {\r\n            const messages   = [];\r\n            const attributes = JSON.parse(JSON.stringify(this.selectedAttributes));\r\n\r\n            for (const attributeToReset of invalidSelection.attributesToReset)\r\n            {\r\n                messages.push(\r\n                    this.$translate(\"Ceres::Template.singleItemNotAvailable\", { name: attributeToReset.name })\r\n                );\r\n\r\n                attributes[attributeToReset.attributeId] = (!this.hasEmptyOption && App.config.item.showPleaseSelect) ? -1 : null;\r\n            }\r\n\r\n            if (invalidSelection.newUnit)\r\n            {\r\n                if (this.lastContentCount > 1 && this.possibleUnitCombinationIds.length > 1 && !isNull(this.selectedUnit))\r\n                {\r\n                    messages.push(\r\n                        this.$translate(\"Ceres::Template.singleItemNotAvailable\", { name:\r\n                                this.$translate(\"Ceres::Template.singleItemContent\")\r\n                        })\r\n                    );\r\n                }\r\n\r\n                this.$store.commit(`${this.itemId}/variationSelect/selectItemUnit`, invalidSelection.newUnit);\r\n            }\r\n\r\n            this.$store.commit(`${this.itemId}/variationSelect/setItemSelectedAttributes`, attributes);\r\n\r\n            this.setVariation(this.currentSelection ? this.currentSelection.variationId : 0);\r\n\r\n            NotificationService.warn(\r\n                messages.join(\"<br>\")\r\n            ).closeAfter(5000);\r\n        },\r\n\r\n        /**\r\n         * returns matching variations with current selection\r\n         * attributes and unitId could be filled, to check a specific selection\r\n         * @param {object} attributes\r\n         * @param {number} unitId\r\n         * @param {boolean} strict\r\n         */\r\n        filterVariations(attributes, unitId, strict, ignoreUnit)\r\n        {\r\n            attributes = attributes || this.selectedAttributes;\r\n            unitId = unitId || this.selectedUnit;\r\n            strict = !!strict;\r\n            ignoreUnit = !!ignoreUnit;\r\n\r\n            const key = JSON.stringify(attributes) + \"_\" + unitId + \"_\" + strict + \"_\" + ignoreUnit;\r\n\r\n            if (isDefined(this.filteredVariationsCache[key]))\r\n            {\r\n                return this.filteredVariationsCache[key];\r\n            }\r\n\r\n            const uniqueValues = [...new Set(Object.values(attributes))];\r\n            const isEmptyOptionSelected = uniqueValues.length === 1 && isNull(uniqueValues[0]);\r\n            const filteredVariations = this.variations.filter(variation =>\r\n            {\r\n                // the selected unit is not matching\r\n                if (!ignoreUnit && variation.unitCombinationId !== unitId)\r\n                {\r\n                    return false;\r\n                }\r\n\r\n                // the variation has no attributes (only checked, if any attribute has a selected value); or the variation has attributes and empty option is selected\r\n                // requires more than 0 attributes\r\n                if (((!isEmptyOptionSelected && !variation.attributes.length) || (isEmptyOptionSelected && variation.attributes.length))\r\n                    && this.attributes.length > 0)\r\n                {\r\n                    return false;\r\n                }\r\n\r\n                for (const attributeId in attributes)\r\n                {\r\n                    const variationAttribute = variation.attributes.find(variationAttribute =>\r\n                        variationAttribute.attributeId === parseInt(attributeId));\r\n\r\n                    // an attribute is not matching with selection\r\n                    if (variationAttribute &&\r\n                        variationAttribute.attributeValueId !== attributes[attributeId] &&\r\n                        (strict || !strict && !isNull(attributes[attributeId]) && attributes[attributeId] !== -1))\r\n                    {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                return true;\r\n            });\r\n\r\n            this.filteredVariationsCache[key] = filteredVariations;\r\n\r\n            return filteredVariations;\r\n        },\r\n\r\n        /**\r\n         * returns true, if the selection with a new attribute value would be valid\r\n         * @param {number} attributeId\r\n         * @param {[number, string, null]} attributeValueId\r\n         * @param {boolean} filterSalableVariations\r\n         */\r\n        isAttributeSelectionValid(attributeId, attributeValueId, filterSalableVariations)\r\n        {\r\n            attributeValueId = parseInt(attributeValueId) || null;\r\n            if (this.selectedAttributes[attributeId] === attributeValueId)\r\n            {\r\n                return true;\r\n            }\r\n\r\n            const selectedAttributes = JSON.parse(JSON.stringify(this.selectedAttributes));\r\n\r\n            selectedAttributes[attributeId] = parseInt(attributeValueId) || null;\r\n\r\n            const ignoreUnit = !(Object.keys(this.possibleUnits).length > 1 && this.isContentVisible);\r\n            let variations = this.filterVariations(selectedAttributes, null, null, ignoreUnit);\r\n\r\n            if (filterSalableVariations)\r\n            {\r\n                variations = variations.filter(variation => variation.isSalable)\r\n            }\r\n\r\n            return variations.length > 0;\r\n        },\r\n\r\n        /**\r\n         * returns true, if the selection with a new unitId would be valid\r\n         * @param {[number, string]} unitId\r\n         */\r\n        isUnitSelectionValid(unitId)\r\n        {\r\n            unitId = parseInt(unitId);\r\n            if (this.selectedUnit === unitId)\r\n            {\r\n                return true;\r\n            }\r\n\r\n            return this\r\n                .filterVariations(null, unitId)\r\n                .filter(variation => variation.isSalable)\r\n                .length > 0\r\n        },\r\n\r\n        /**\r\n         * dispatch vuex action 'loadVariation' to archive a variation\r\n         * dispatches a custom event named 'onVariationChanged'\r\n         * @param {[string, number, null]} variationId\r\n         */\r\n        setVariation(variationId)\r\n        {\r\n            if (!isDefined(variationId) && this.currentSelection)\r\n            {\r\n                variationId = this.currentSelection.variationId;\r\n            }\r\n\r\n            if (isDefined(variationId))\r\n            {\r\n                this.$store.dispatch(`${this.itemId}/loadVariation`, variationId).then(variation =>\r\n                {\r\n                    document.dispatchEvent(new CustomEvent(\"onVariationChanged\",\r\n                        {\r\n                            detail:\r\n                                {\r\n                                    attributes: variation.attributes,\r\n                                    documents: variation.documents,\r\n                                    itemId: this.itemId\r\n                                }\r\n                        }));\r\n                });\r\n            }\r\n        },\r\n\r\n        isTextCut(content)\r\n        {\r\n            if (this.$refs.attributesContaner)\r\n            {\r\n                return textWidth(content, \"Custom-Font, Helvetica, Arial, sans-serif\") > this.$refs.attributesContaner[0].clientWidth;\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        getSelectedAttributeValueName(attribute)\r\n        {\r\n            const selectedAttributeValueId =  this.selectedAttributes[attribute.attributeId];\r\n            const selectedAttributeValue = attribute.values.find(attrValue => attrValue.attributeValueId === selectedAttributeValueId);\r\n\r\n            if (selectedAttributeValue)\r\n            {\r\n                return selectedAttributeValue.name;\r\n            }\r\n            else if (App.config.item.showPleaseSelect && selectedAttributeValueId === -1)\r\n            {\r\n                return this.$translate(\"Ceres::Template.singleItemPleaseSelect\");\r\n            }\r\n            return this.$translate(\"Ceres::Template.singleItemNoSelection\");\r\n        },\r\n\r\n        transformPossibleUnits(possibleUnits)\r\n        {\r\n            return Object.entries(possibleUnits).sort((unitA, unitB) => {\r\n                unitA = this.splitUnitName(unitA[1]);\r\n                unitB = this.splitUnitName(unitB[1]);\r\n                // order by unit\r\n                if (unitA[1] < unitB[1]) {\r\n                    return -1;\r\n                }\r\n                if (unitA[1] > unitB[1]) {\r\n                    return 1;\r\n                }\r\n                // order by content (count)\r\n                if (unitA[0] < unitB[0]) {\r\n                    return -1;\r\n                }\r\n                if (unitA[0] > unitB[0]) {\r\n                    return 1;\r\n                }\r\n                return 0;\r\n            });\r\n        },\r\n        splitUnitName(unitName) {\r\n            const unitNameSplit = unitName.split(\" \");\r\n\r\n            if (!isNaN(unitNameSplit[0])) {\r\n                unitNameSplit[0] = unitNameSplit[0].replace(App.currencyPattern.separator_thousands, \"\");\r\n                unitNameSplit[0] = parseInt(unitNameSplit[0]);\r\n            }\r\n\r\n            return unitNameSplit;\r\n        }\r\n    },\r\n\r\n    watch:\r\n    {\r\n        currentSelection(value)\r\n        {\r\n            this.$store.commit(`${this.itemId}/variationSelect/setIsVariationSelected`, !!value);\r\n        },\r\n        variations()\r\n        {\r\n            // FIX unset variation cache after subsequent variations are loaded\r\n            this.filteredVariationsCache = {};\r\n        }\r\n    }\r\n}\r\n</script>\r\n","var DESCRIPTORS = require('../internals/descriptors');\nvar objectKeys = require('../internals/object-keys');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar propertyIsEnumerable = require('../internals/object-property-is-enumerable').f;\n\n// `Object.{ entries, values }` methods implementation\nvar createMethod = function (TO_ENTRIES) {\n  return function (it) {\n    var O = toIndexedObject(it);\n    var keys = objectKeys(O);\n    var length = keys.length;\n    var i = 0;\n    var result = [];\n    var key;\n    while (length > i) {\n      key = keys[i++];\n      if (!DESCRIPTORS || propertyIsEnumerable.call(O, key)) {\n        result.push(TO_ENTRIES ? [key, O[key]] : O[key]);\n      }\n    }\n    return result;\n  };\n};\n\nmodule.exports = {\n  // `Object.entries` method\n  // https://tc39.es/ecma262/#sec-object.entries\n  entries: createMethod(true),\n  // `Object.values` method\n  // https://tc39.es/ecma262/#sec-object.values\n  values: createMethod(false)\n};\n","var $ = require('../internals/export');\nvar $entries = require('../internals/object-to-array').entries;\n\n// `Object.entries` method\n// https://tc39.es/ecma262/#sec-object.entries\n$({ target: 'Object', stat: true }, {\n  entries: function entries(O) {\n    return $entries(O);\n  }\n});\n","var $ = require('../internals/export');\nvar $values = require('../internals/object-to-array').values;\n\n// `Object.values` method\n// https://tc39.es/ecma262/#sec-object.values\n$({ target: 'Object', stat: true }, {\n  values: function values(O) {\n    return $values(O);\n  }\n});\n","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\", [\n    _vm.attributes.length ||\n    (_vm.possibleUnitCombinationIds.length > 1 && _vm.isContentVisible)\n      ? _c(\n          \"div\",\n          { staticClass: \"row\" },\n          [\n            _vm._l(_vm.attributes, function(attribute) {\n              return _c(\"div\", { staticClass: \"col-12 variation-select\" }, [\n                attribute.type === \"dropdown\"\n                  ? _c(\n                      \"div\",\n                      {\n                        ref: \"attributesContaner\",\n                        refInFor: true,\n                        staticClass: \"input-unit\"\n                      },\n                      [\n                        _c(\n                          \"select\",\n                          {\n                            staticClass: \"custom-select\",\n                            attrs: {\n                              id: \"custom-select_\" + attribute.name,\n                              \"data-testing\": \"variation-select-dropdown\"\n                            },\n                            on: {\n                              change: function($event) {\n                                return _vm.selectAttribute(\n                                  attribute.attributeId,\n                                  $event.target.value\n                                )\n                              }\n                            }\n                          },\n                          [\n                            _vm.addPleaseSelectOption || !_vm.hasSelection\n                              ? _c(\"option\", { domProps: { value: -1 } }, [\n                                  _vm._v(\n                                    _vm._s(\n                                      _vm.$translate(\n                                        \"Ceres::Template.singleItemPleaseSelect\"\n                                      )\n                                    )\n                                  )\n                                ])\n                              : _vm._e(),\n                            _vm._v(\" \"),\n                            _vm.hasEmptyOption ||\n                            _vm.selectedAttributes[attribute.attributeId] ===\n                              null\n                              ? _c(\n                                  \"option\",\n                                  {\n                                    domProps: {\n                                      value: null,\n                                      selected:\n                                        _vm.selectedAttributes[\n                                          attribute.attributeId\n                                        ] === null\n                                    }\n                                  },\n                                  [\n                                    _vm._v(\n                                      _vm._s(\n                                        _vm.$translate(\n                                          \"Ceres::Template.singleItemNoSelection\"\n                                        )\n                                      )\n                                    )\n                                  ]\n                                )\n                              : _vm._e(),\n                            _vm._v(\" \"),\n                            _vm._l(attribute.values, function(value) {\n                              return _c(\n                                \"option\",\n                                {\n                                  domProps: {\n                                    value: value.attributeValueId,\n                                    selected:\n                                      value.attributeValueId ===\n                                      _vm.selectedAttributes[\n                                        attribute.attributeId\n                                      ]\n                                  }\n                                },\n                                [\n                                  _vm.isAttributeSelectionValid(\n                                    attribute.attributeId,\n                                    value.attributeValueId,\n                                    true\n                                  )\n                                    ? [\n                                        _vm._v(\n                                          \"\\n                            \" +\n                                            _vm._s(value.name) +\n                                            \"\\n                        \"\n                                        )\n                                      ]\n                                    : _vm.isAttributeSelectionValid(\n                                        attribute.attributeId,\n                                        value.attributeValueId,\n                                        false\n                                      )\n                                    ? [\n                                        _vm._v(\n                                          \"\\n                            \" +\n                                            _vm._s(\n                                              _vm.$translate(\n                                                \"Ceres::Template.singleItemNotSalableAttribute\",\n                                                { name: value.name }\n                                              )\n                                            ) +\n                                            \"\\n                        \"\n                                        )\n                                      ]\n                                    : [\n                                        _vm._v(\n                                          \"\\n                            \" +\n                                            _vm._s(\n                                              _vm.$translate(\n                                                \"Ceres::Template.singleItemInvalidAttribute\",\n                                                { name: value.name }\n                                              )\n                                            ) +\n                                            \"\\n                        \"\n                                        )\n                                      ]\n                                ],\n                                2\n                              )\n                            })\n                          ],\n                          2\n                        ),\n                        _vm._v(\" \"),\n                        _c(\n                          \"label\",\n                          {\n                            directives: [\n                              {\n                                name: \"tooltip\",\n                                rawName: \"v-tooltip\",\n                                value: _vm.isTextCut(attribute.name),\n                                expression: \"isTextCut(attribute.name)\"\n                              }\n                            ],\n                            attrs: {\n                              for: \"custom-select_\" + attribute.name,\n                              \"data-toggle\": \"tooltip\",\n                              \"data-placement\": \"top\",\n                              title: attribute.name,\n                              \"data-testing\": \"variation-select-dropdown-label\"\n                            }\n                          },\n                          [_vm._v(_vm._s(attribute.name))]\n                        )\n                      ]\n                    )\n                  : attribute.type === \"box\" || attribute.type === \"image\"\n                  ? _c(\"div\", [\n                      _c(\n                        \"span\",\n                        {\n                          staticClass: \"text-muted\",\n                          attrs: { \"data-testing\": \"attribute-name\" }\n                        },\n                        [_vm._v(_vm._s(attribute.name) + \":\")]\n                      ),\n                      _vm._v(\" \"),\n                      _c(\n                        \"b\",\n                        { attrs: { \"data-testing\": \"attribute-value\" } },\n                        [\n                          _vm._v(\n                            _vm._s(_vm.getSelectedAttributeValueName(attribute))\n                          )\n                        ]\n                      ),\n                      _vm._v(\" \"),\n                      _c(\n                        \"div\",\n                        {\n                          staticClass: \"v-s-boxes py-3\",\n                          class: { images: attribute.type === \"image\" }\n                        },\n                        [\n                          _vm.addPleaseSelectOption\n                            ? _c(\n                                \"div\",\n                                {\n                                  staticClass: \"v-s-box bg-white empty-option\",\n                                  class: {\n                                    active:\n                                      _vm.selectedAttributes[\n                                        attribute.attributeId\n                                      ] === -1,\n                                    invalid: !_vm.isAttributeSelectionValid(\n                                      attribute.attributeId,\n                                      -1\n                                    )\n                                  },\n                                  attrs: {\n                                    \"data-testing\": \"variation-select-box\"\n                                  },\n                                  on: {\n                                    click: function($event) {\n                                      return _vm.selectAttribute(\n                                        attribute.attributeId,\n                                        -1\n                                      )\n                                    }\n                                  }\n                                },\n                                [\n                                  _c(\"span\", { staticClass: \"mx-3\" }, [\n                                    _vm._v(\n                                      _vm._s(\n                                        _vm.$translate(\n                                          \"Ceres::Template.singleItemPleaseSelect\"\n                                        )\n                                      )\n                                    )\n                                  ])\n                                ]\n                              )\n                            : _vm._e(),\n                          _vm._v(\" \"),\n                          _vm.hasEmptyOption\n                            ? _c(\n                                \"div\",\n                                {\n                                  staticClass: \"v-s-box bg-white empty-option\",\n                                  class: {\n                                    active:\n                                      _vm.selectedAttributes[\n                                        attribute.attributeId\n                                      ] === null,\n                                    invalid: !_vm.isAttributeSelectionValid(\n                                      attribute.attributeId,\n                                      null,\n                                      true\n                                    )\n                                  },\n                                  attrs: {\n                                    \"data-testing\": \"variation-select-box\"\n                                  },\n                                  on: {\n                                    click: function($event) {\n                                      return _vm.selectAttribute(\n                                        attribute.attributeId,\n                                        null\n                                      )\n                                    }\n                                  }\n                                },\n                                [\n                                  _c(\"span\", { staticClass: \"mx-3\" }, [\n                                    _vm._v(\n                                      _vm._s(\n                                        _vm.$translate(\n                                          \"Ceres::Template.singleItemNoSelection\"\n                                        )\n                                      )\n                                    )\n                                  ])\n                                ]\n                              )\n                            : _vm._e(),\n                          _vm._v(\" \"),\n                          _vm._l(attribute.values, function(value) {\n                            return _c(\n                              \"div\",\n                              {\n                                directives: [\n                                  {\n                                    name: \"tooltip\",\n                                    rawName: \"v-tooltip\",\n                                    value: true,\n                                    expression: \"true\"\n                                  }\n                                ],\n                                staticClass: \"v-s-box bg-white\",\n                                class: {\n                                  active:\n                                    value.attributeValueId ===\n                                    _vm.selectedAttributes[\n                                      attribute.attributeId\n                                    ],\n                                  invalid: !_vm.isAttributeSelectionValid(\n                                    attribute.attributeId,\n                                    value.attributeValueId,\n                                    true\n                                  )\n                                },\n                                attrs: {\n                                  \"data-testing\": \"variation-select-box\",\n                                  \"data-html\": \"true\",\n                                  \"data-toggle\": \"tooltip\",\n                                  \"data-placement\": \"top\",\n                                  \"data-original-title\": _vm.getTooltip(\n                                    attribute,\n                                    value\n                                  )\n                                },\n                                on: {\n                                  click: function($event) {\n                                    return _vm.selectAttribute(\n                                      attribute.attributeId,\n                                      value.attributeValueId\n                                    )\n                                  }\n                                }\n                              },\n                              [\n                                attribute.type === \"box\"\n                                  ? _c(\"span\", { staticClass: \"mx-3\" }, [\n                                      _vm._v(_vm._s(value.name))\n                                    ])\n                                  : _c(\"img\", {\n                                      staticClass: \"p-1\",\n                                      attrs: {\n                                        src: value.imageUrl,\n                                        alt: value.name\n                                      }\n                                    })\n                              ]\n                            )\n                          })\n                        ],\n                        2\n                      )\n                    ])\n                  : _vm._e()\n              ])\n            }),\n            _vm._v(\" \"),\n            _vm.possibleUnitCombinationIds.length > 1 && _vm.isContentVisible\n              ? _c(\"div\", { staticClass: \"col-12 variation-select\" }, [\n                  _c(\"div\", { staticClass: \"input-unit\" }, [\n                    _c(\n                      \"select\",\n                      {\n                        staticClass: \"custom-select\",\n                        attrs: {\n                          id: \"unit-combination-ids-select\",\n                          \"data-testing\": \"variation-select-unit\"\n                        },\n                        on: {\n                          change: function($event) {\n                            return _vm.selectUnit($event.target.value)\n                          }\n                        }\n                      },\n                      _vm._l(_vm.possibleUnitCombinationIds, function(\n                        unitCombinationId\n                      ) {\n                        return _c(\n                          \"option\",\n                          {\n                            domProps: {\n                              value: unitCombinationId,\n                              selected:\n                                parseInt(unitCombinationId) === _vm.selectedUnit\n                            }\n                          },\n                          [\n                            _vm.isUnitSelectionValid(unitCombinationId)\n                              ? [\n                                  _vm._v(\n                                    \"\\n                            \" +\n                                      _vm._s(\n                                        _vm.possibleUnits[unitCombinationId]\n                                      ) +\n                                      \"\\n                        \"\n                                  )\n                                ]\n                              : [\n                                  _vm._v(\n                                    \"\\n                            \" +\n                                      _vm._s(\n                                        _vm.$translate(\n                                          \"Ceres::Template.singleItemInvalidAttribute\",\n                                          {\n                                            name:\n                                              _vm.possibleUnits[\n                                                unitCombinationId\n                                              ]\n                                          }\n                                        )\n                                      ) +\n                                      \"\\n                        \"\n                                  )\n                                ]\n                          ],\n                          2\n                        )\n                      }),\n                      0\n                    ),\n                    _vm._v(\" \"),\n                    _c(\n                      \"label\",\n                      {\n                        attrs: {\n                          for: \"unit-combination-ids-select\",\n                          \"data-testing\": \"variation-select-unit-label\"\n                        }\n                      },\n                      [\n                        _vm._v(\n                          _vm._s(\n                            _vm.$translate(\"Ceres::Template.singleItemContent\")\n                          )\n                        )\n                      ]\n                    )\n                  ])\n                ])\n              : _vm._e()\n          ],\n          2\n        )\n      : _c(\"div\", [_vm._t(\"default\")], 2)\n  ])\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","import { render, staticRenderFns } from \"./VariationSelect.vue?vue&type=template&id=4a939d05&\"\nimport script from \"./VariationSelect.vue?vue&type=script&lang=js&\"\nexport * from \"./VariationSelect.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"C:\\\\Users\\\\Duc\\\\Documents\\\\Webshop\\\\plugin-ceres\\\\node_modules\\\\vue-hot-reload-api\\\\dist\\\\index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('4a939d05')) {\n      api.createRecord('4a939d05', component.options)\n    } else {\n      api.reload('4a939d05', component.options)\n    }\n    module.hot.accept(\"./VariationSelect.vue?vue&type=template&id=4a939d05&\", function () {\n      api.rerender('4a939d05', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"resources/js/src/app/components/item/VariationSelect.vue\"\nexport default component.exports","import mod from \"-!../../../../../../node_modules/babel-loader/lib/index.js!../../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./VariationSelect.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../../node_modules/babel-loader/lib/index.js!../../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./VariationSelect.vue?vue&type=script&lang=js&\"","export * from \"-!../../../../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./VariationSelect.vue?vue&type=template&id=4a939d05&\""],"sourceRoot":""}