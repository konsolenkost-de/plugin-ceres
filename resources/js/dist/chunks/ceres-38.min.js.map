{"version":3,"sources":["webpack:///./resources/js/src/app/components/item/QuantityInput.vue?b65e","webpack:///resources/js/src/app/components/item/QuantityInput.vue","webpack:///./resources/js/src/app/components/item/QuantityInput.vue?2b01","webpack:///./resources/js/src/app/components/item/QuantityInput.vue"],"names":["render","_vm","this","_h","$createElement","_c","_self","staticClass","ref","attrs","type","disabled","waiting","$translate","domProps","value","displayValue","on","change","$event","setValue","target","_v","directives","name","rawName","isMaximum","compMax","expression","class","useAppearance","title","maximumHint","click","increaseValue","isMinimum","minimumHint","decreaseValue","_withStripped","component","options","__file"],"mappings":"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","file":"chunks/ceres-38.min.js","sourcesContent":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\", { staticClass: \"qty-box d-flex h-100\" }, [\n    _c(\"input\", {\n      ref: \"quantityInputField\",\n      staticClass: \"qty-input text-center\",\n      attrs: {\n        type: \"text\",\n        disabled: _vm.waiting,\n        \"aria-label\": _vm.$translate(\"Ceres::Template.itemQuantityInput\")\n      },\n      domProps: { value: _vm.displayValue },\n      on: {\n        change: function($event) {\n          return _vm.setValue($event.target.value)\n        }\n      }\n    }),\n    _vm._v(\" \"),\n    _c(\"div\", { staticClass: \"qty-btn-container d-flex flex-column\" }, [\n      _c(\n        \"button\",\n        {\n          directives: [\n            {\n              name: \"tooltip\",\n              rawName: \"v-tooltip\",\n              value: _vm.isMaximum && _vm.compMax !== 0,\n              expression: \"isMaximum && compMax !== 0\"\n            }\n          ],\n          staticClass:\n            \"btn qty-btn flex-fill d-flex justify-content-center p-0\",\n          class: {\n            disabled: _vm.isMaximum || _vm.waiting,\n            \"btn-appearance\": _vm.useAppearance\n          },\n          attrs: {\n            \"data-toggle\": \"tooltip\",\n            \"data-placement\": \"top\",\n            \"data-testing\": \"quantity-btn-increase\",\n            title: _vm.maximumHint,\n            \"aria-label\": _vm.$translate(\n              \"Ceres::Template.itemQuantityInputIncrease\"\n            )\n          },\n          on: {\n            click: function($event) {\n              return _vm.increaseValue()\n            }\n          }\n        },\n        [\n          _c(\"i\", {\n            staticClass: \"fa fa-plus default-float\",\n            attrs: { \"aria-hidden\": \"true\" }\n          })\n        ]\n      ),\n      _vm._v(\" \"),\n      _c(\n        \"button\",\n        {\n          directives: [\n            {\n              name: \"tooltip\",\n              rawName: \"v-tooltip\",\n              value: _vm.isMinimum && _vm.compMax !== 0,\n              expression: \"isMinimum && compMax !== 0\"\n            }\n          ],\n          staticClass:\n            \"btn qty-btn flex-fill d-flex justify-content-center p-0\",\n          class: {\n            disabled: _vm.isMinimum || _vm.waiting,\n            \"btn-appearance\": _vm.useAppearance\n          },\n          attrs: {\n            \"data-toggle\": \"tooltip\",\n            \"data-placement\": \"bottom\",\n            \"data-testing\": \"quantity-btn-decrease\",\n            title: _vm.minimumHint,\n            \"aria-label\": _vm.$translate(\n              \"Ceres::Template.itemQuantityInputDecrease\"\n            )\n          },\n          on: {\n            click: function($event) {\n              return _vm.decreaseValue()\n            }\n          }\n        },\n        [\n          _c(\"i\", {\n            staticClass: \"fa fa-minus default-float\",\n            attrs: { \"aria-hidden\": \"true\" }\n          })\n        ]\n      )\n    ])\n  ])\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\r\n    <div class=\"qty-box d-flex h-100\">\r\n        <input class=\"qty-input text-center\"\r\n               type=\"text\"\r\n               :value=\"displayValue\"\r\n               @change=\"setValue($event.target.value)\"\r\n               :disabled=\"waiting\"\r\n               ref=\"quantityInputField\"\r\n               :aria-label=\"$translate('Ceres::Template.itemQuantityInput')\">\r\n\r\n        <div class=\"qty-btn-container d-flex flex-column\">\r\n            <button class=\"btn qty-btn flex-fill d-flex justify-content-center p-0\"\r\n                 @click=\"increaseValue()\"\r\n                 :class=\"{ 'disabled': isMaximum || waiting, 'btn-appearance': useAppearance }\"\r\n                 v-tooltip=\"isMaximum && compMax !== 0\"\r\n                 data-toggle=\"tooltip\"\r\n                 data-placement=\"top\"\r\n                 data-testing=\"quantity-btn-increase\"\r\n                 :title=\"maximumHint\"\r\n                 :aria-label=\"$translate('Ceres::Template.itemQuantityInputIncrease')\">\r\n                <i class=\"fa fa-plus default-float\" aria-hidden=\"true\"></i>\r\n            </button>\r\n\r\n            <button class=\"btn qty-btn flex-fill d-flex justify-content-center p-0\"\r\n                 @click=\"decreaseValue()\"\r\n                 :class=\"{ 'disabled': isMinimum || waiting, 'btn-appearance': useAppearance }\"\r\n                 v-tooltip=\"isMinimum && compMax !== 0\"\r\n                 data-toggle=\"tooltip\"\r\n                 data-placement=\"bottom\"\r\n                 data-testing=\"quantity-btn-decrease\"\r\n                 :title=\"minimumHint\"\r\n                 :aria-label=\"$translate('Ceres::Template.itemQuantityInputDecrease')\">\r\n                <i class=\"fa fa-minus default-float\" aria-hidden=\"true\"></i>\r\n            </button>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { floatLength, formatFloat, limit } from \"../../helper/number\";\r\nimport { defaultValue, isDefined, isNullOrUndefined } from \"../../helper/utils\";\r\nimport { debounce } from \"../../helper/debounce\";\r\nimport { mapState } from \"vuex\";\r\n\r\nexport default {\r\n    name: \"quantity-input\",\r\n\r\n    props: {\r\n        value: {\r\n            type: Number,\r\n            required: true\r\n        },\r\n        timeout: {\r\n            type: Number,\r\n            required: false,\r\n            default: 500\r\n        },\r\n        min: {\r\n            type: Number,\r\n            required: false,\r\n            default: 0\r\n        },\r\n        max: {\r\n            type: Number,\r\n            required: false\r\n        },\r\n        interval: {\r\n            type: Number,\r\n            required: false,\r\n            default: 1\r\n        },\r\n        waiting: {\r\n            type: Boolean,\r\n            required: false\r\n        },\r\n        variationId: {\r\n            type: Number,\r\n            required: false\r\n        },\r\n        useAppearance: Boolean\r\n    },\r\n\r\n    data()\r\n    {\r\n        return {\r\n            compValue:      this.value,\r\n            compMin:        this.min,\r\n            compMax:        this.max,\r\n            compInterval:   this.interval,\r\n            compDecimals:   0,\r\n            onValueChanged: null\r\n        };\r\n    },\r\n\r\n    created()\r\n    {\r\n        this.compInterval = defaultValue(this.compInterval, 1);\r\n        this.compInterval = this.compInterval === 0 ? 1 : this.compInterval;\r\n\r\n        const minDecimals = floatLength(this.min);\r\n        const intervalDecimals = floatLength(this.compInterval);\r\n\r\n        this.compDecimals = Math.max(minDecimals, intervalDecimals);\r\n\r\n        this.onValueChanged = debounce(() =>\r\n        {\r\n            this.$emit(\"quantity-change\", this.compValue);\r\n        }, defaultValue(this.timeout, 500));\r\n\r\n        if (!isNullOrUndefined(this.variationId))\r\n        {\r\n            this.fetchQuantityFromBasket();\r\n        }\r\n    },\r\n\r\n    computed:\r\n    {\r\n        variationBasketQuantity()\r\n        {\r\n            if (isNullOrUndefined(this.variationId))\r\n            {\r\n                return 0;\r\n            }\r\n\r\n            if(this.itemSetVariationId <= 0 || this.variationId === this.itemSetVariationId)\r\n            {\r\n                const basketObject = this.$store.state.basket.items.find(variations => variations.variationId === this.variationId);\r\n\r\n                return basketObject ? basketObject.quantity : 0;\r\n            }\r\n\r\n            return 0;\r\n        },\r\n\r\n        isMinimum()\r\n        {\r\n            return isDefined(this.compMin) && (this.compValue - this.compInterval) < this.compMin;\r\n        },\r\n\r\n        isMaximum()\r\n        {\r\n            return isDefined(this.compMax) && (this.compValue + this.compInterval) > this.compMax;\r\n        },\r\n\r\n        minimumHint()\r\n        {\r\n            return this.$translate(\r\n                \"Ceres::Template.singleItemQuantityMin\",\r\n                {\r\n                    min: this.$options.filters.numberFormat(this.compMin)\r\n                }\r\n            );\r\n        },\r\n\r\n        maximumHint()\r\n        {\r\n            return this.$translate(\r\n                \"Ceres::Template.singleItemQuantityMax\",\r\n                {\r\n                    max: this.$options.filters.numberFormat(this.Max)\r\n                }\r\n            );\r\n        },\r\n\r\n        displayValue()\r\n        {\r\n            return this.$options.filters.numberFormat(this.compValue);\r\n        },\r\n\r\n        itemSetVariationId()\r\n        {\r\n            if (this.$store.state.items.itemSetId > 0)\r\n            {\r\n                return this.$store.getters[`${this.$store.state.items.itemSetId}/currentItemVariation`].variation.id;\r\n            }\r\n\r\n            return 0;\r\n        },\r\n\r\n        ...mapState({\r\n            basketItems: state => state.basket.items\r\n        })\r\n    },\r\n\r\n    watch:\r\n    {\r\n        basketItems:\r\n        {\r\n            handler(newValue, oldValue)\r\n            {\r\n                if (isDefined(this.variationId))\r\n                {\r\n                    this.fetchQuantityFromBasket();\r\n                }\r\n            },\r\n            deep: true\r\n        },\r\n\r\n        min(newValue)\r\n        {\r\n            this.compMin = newValue;\r\n            this.fetchQuantityFromBasket();\r\n        },\r\n\r\n        max(newValue)\r\n        {\r\n            this.compMax = newValue;\r\n            this.fetchQuantityFromBasket();\r\n        },\r\n\r\n        value(newValue, oldValue)\r\n        {\r\n            if (newValue !== oldValue)\r\n            {\r\n                this.setValue(newValue);\r\n            }\r\n        }\r\n    },\r\n\r\n    methods:\r\n    {\r\n        increaseValue()\r\n        {\r\n            const newValue = formatFloat(this.compValue + this.compInterval, this.compDecimals);\r\n\r\n            if ((isNullOrUndefined(this.compMax) || newValue <= this.compMax) && !this.waiting)\r\n            {\r\n                this.setValue(newValue);\r\n            }\r\n        },\r\n\r\n        decreaseValue()\r\n        {\r\n            const newValue = formatFloat(this.compValue - this.compInterval, this.compDecimals);\r\n\r\n            if ((isNullOrUndefined(this.compMin) || newValue >= this.compMin) && !this.waiting)\r\n            {\r\n                this.setValue(newValue);\r\n            }\r\n        },\r\n\r\n        setValue(value)\r\n        {\r\n            // consider the configured decimal seperator (if the input is typed in the input field)\r\n            if (typeof value === \"string\")\r\n            {\r\n                value = value.replace(App.decimalSeparator || \",\", \".\");\r\n            }\r\n\r\n            value = parseFloat(value);\r\n            if (isNaN(value))\r\n            {\r\n                value = defaultValue(this.compMin, 1);\r\n            }\r\n\r\n            // limit new value to min/ max value\r\n            value = limit(value, this.compMin, this.compMax);\r\n\r\n            // make sure, new value is an even multiple of interval\r\n            const diff = formatFloat((value - this.min) % this.compInterval, this.compDecimals, true);\r\n\r\n            if (diff > 0 && diff !== this.compInterval)\r\n            {\r\n                if (diff < this.compInterval / 2)\r\n                {\r\n                    value -= diff;\r\n                }\r\n                else\r\n                {\r\n                    value += this.compInterval - diff;\r\n                }\r\n                value = limit(value, this.compMin, this.compMax);\r\n            }\r\n\r\n            // cut fraction\r\n            value = formatFloat(value, this.compDecimals);\r\n\r\n            if (value !== this.compValue)\r\n            {\r\n                this.compValue = value;\r\n                this.onValueChanged();\r\n            }\r\n            else if (!isNullOrUndefined(this.$refs.quantityInputField))\r\n            {\r\n                this.$refs.quantityInputField.value = this.displayValue;\r\n            }\r\n        },\r\n\r\n        fetchQuantityFromBasket()\r\n        {\r\n            if (!isNullOrUndefined(this.min) && this.variationBasketQuantity >= this.min && this.variationBasketQuantity !== 0)\r\n            {\r\n                this.compMin = this.min % this.compInterval  || this.compInterval;\r\n            }\r\n            else if (this.variationBasketQuantity === 0)\r\n            {\r\n                this.compMin = this.min;\r\n            }\r\n\r\n            if (!isNullOrUndefined(this.max))\r\n            {\r\n                // decrease maximum quantity by quantity of variations already in basket\r\n                this.compMax = this.max - this.variationBasketQuantity;\r\n\r\n                if (this.variationBasketQuantity + this.compInterval > this.max)\r\n                {\r\n                    this.compMin = 0;\r\n                    this.compMax = 0;\r\n                    this.$emit(\"out-of-stock\", true);\r\n                }\r\n                else\r\n                {\r\n                    this.$emit(\"out-of-stock\", false);\r\n                }\r\n            }\r\n            else\r\n            {\r\n                this.$emit(\"out-of-stock\", false);\r\n            }\r\n\r\n            this.setValue(this.compMin);\r\n        }\r\n    }\r\n}\r\n</script>\r\n","import mod from \"-!../../../../../../node_modules/babel-loader/lib/index.js!../../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./QuantityInput.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../../node_modules/babel-loader/lib/index.js!../../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./QuantityInput.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./QuantityInput.vue?vue&type=template&id=62163595&\"\nimport script from \"./QuantityInput.vue?vue&type=script&lang=js&\"\nexport * from \"./QuantityInput.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"C:\\\\Users\\\\Duc\\\\Documents\\\\Webshop\\\\plugin-ceres\\\\node_modules\\\\vue-hot-reload-api\\\\dist\\\\index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('62163595')) {\n      api.createRecord('62163595', component.options)\n    } else {\n      api.reload('62163595', component.options)\n    }\n    module.hot.accept(\"./QuantityInput.vue?vue&type=template&id=62163595&\", function () {\n      api.rerender('62163595', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"resources/js/src/app/components/item/QuantityInput.vue\"\nexport default component.exports"],"sourceRoot":""}